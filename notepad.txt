 13264176688
张波波
上海有大信息科技有限公司
00-21-CC-BF-6F-FD
vscode导航栏设置成中文
Shift + Ctrl + p 出现安装搜索框；
configure language 
在语言配置里输入  zh-cn 然后重启就好了。
3. 直接删除某一行：shift+delete或者ctrl+shift+k 
4. 多行光标选择：alt+鼠标左键 
charAt()	返回指定索引位置的字符
concat()	连接两个或多个字符串，返回连接后的字符串
indexOf()	返回字符串中检索指定字符第一次出现的位置
match()	找到一个或多个正则表达式的匹配
replace()	替换与正则表达式匹配的子串
slice()	提取字符串的片断，并在新的字符串中返回被提取的部分
split()	把字符串分割为子字符串数组
substr()	从起始索引号提取字符串中指定数目的字符
substring()	提取字符串中两个指定的索引号之间的字符
toLocaleLowerCase()  转小写
valueOf()	返回某个字符串对象的原始值

包名  类名
(function(CC){
   CC.UiView = (function(){
     function UiView(){
	this.name = "";
	this.user = "";
     }
     return UiView
   })()
})(CC );

=========================
window + r  打开运行程序
 cmd 命令 
shutdown -s 三十秒后关机
cd .. 返回上级目录 
tree 显示所有文件和目录
dir 查看当前目录结构
mkdir  ** 创建**文件夹
write 打开写字板
notepad 打开记事本
ctrl + c 终止正在执行的命令
========================
vue 笔记

指令： 扩展了html的功能，属性 。v-model 一般用在表单元素上。双向数据绑定。
v-for= "item in items" 循环 {{$index}}；
事件：v-on:click = ""; v-on:mousedown   v-on:dblclick; 双击。
v-show = "" 控制显示隐藏。  数据驱动， 只操作数据。
nowIndex 记录当前点击的是第几个。
$event 事件对象
组织冒泡 
1： e.cancelBubble = true; 阻止冒泡；
2 :  @click.stop = "show()"
阻止默认事件
1: e.preventDefaule;
2: @contextmenu.prevent = "show()"  右击。

属性 v-bind:属性   v-bind:src = ""; 这样使用。
width  height    title  class 
 获取用户操作的数据用v-model  = "msg"； msg存在data里

computed {} 计算属性，  里面都是属性。
过滤器
capitalize  首字母大写  limitBy 限制几个 （1,2）；取几个，从哪开始。
fileBy 过滤数据

原来的html文件 封装成一个 .vue文件 界面跳转是通过路由链接各个 .vue文件
template 包裹html部分。 script标签里是当前的html代码。style是当前界面的样式

Vue-router
<a v-link= "path: '/home' ">主页</a> 跳转链接
<router-view></router-view> 展示内容
每一个 .vue 都是一个组件 ，每个组件都汇总到router中、路由设置好访问路径。
将路径和组件映射好。用户进入界面时，首页VUe初始化调用router
渲染第一个路径组件。 之后根据用户操作切换界面，
这大致就是Vue-router的工作流程。
这里的切换界面不是链接的跳转。而是路径的切换，不同组件之间的切换；
他们都是在同一个界面上实现的。
npm install -g vue-cli 安装vue的脚手架工具。
vue init webpack 项目名字   安装项目模板
然后是各种选项。 name 描述 ESLint

图片需要js引入到程序里， 要用require  src: require('../assets/slideShow/pic3.jpg'),

组件之间的引用，注册必须实现，不然其他地方在注册，也不能实现。
父组件传递给子组件  <child :msg = "msg" :num = "num"></child>
msg  num 必须在父组件里实现数据，
子组件接受时，是这样 
 props : {   //接收数据
     msg: {
        type:array,  // 类型
         default: [] //默认值
     },
      num{
        type: num,
         default: 100
      }  
 }
.
自定义组件
路由里面 router数组里配置的界面， 会塞到router-view里面。.
方法一<com-a></com-a>
方法二<p is = "com-a"></p>



>>>>>>>>>>>>>>>内存空间详解、
堆空间里存的是真正的数据 javascript 所有的数据都存在堆内存中。
数据存取方式是书架式，用哪个直接取。
引用数据类型的值是保存在堆内存中的对象。
在操作对象时，实际上是在操作对象的引用而不是实际的对象
var a3 = null; // 变量对象     变量对象 和堆空间
var b = { m: 20 }; // 变量b存在于变量对象中，{m: 20} 作为对象存在于堆内存中
javascript的内存生命周期：
var a = 20;  // 在内存中给数值变量分配空间
alert(a + 100);  // 使用内存
a = null; // 使用完毕之后，释放内存空间
。通过标记清除的算法来找到哪些对象是不再继续使用的，因此a = null其实仅仅只是做了一个释放引用的操作，让 a 原本对应的值失去引用，脱离执行环境，这个值会在下一次垃圾收集器执行操作时被找到并释放。而在适当的时候解除引用，是为页面获得更好性能的一个重要方式。
局部作用域，函数执行完毕，垃圾收集器很容易做出判断并回收。
全局作用域 ，什么时候需要释放内存空间很难判断，回收机制比较难，浪费内存。

>>>>>>>>>>>>执行上下文
每当控制器转到可执行代码的时候，就会进入一个执行上下文，（当前代码的执行环境）
它会形成一个作用域，js中的运行环境有三种: 全局环境  函数环境 eval；
在一个javascript程序中，会产生多个执行上下文，javascript引擎会以栈的方式处理他们。
函数调用栈。 栈底永远是全局上下文（难以释放的，最后才能出栈的，最后才能释放的。）
栈顶永远是当前正在执行的上下文。执行完毕，自动出栈。
单线程
同步执行，只有栈顶的上下文处于执行中，其他上下文需要等待
全局上下文只有唯一的一个，它在浏览器关闭时出栈
函数的执行上下文的个数没有限制
每次某个函数被调用，就会有个新的执行上下文为其创建，即使是调用的自身函数，也是如此。
执行上下文的生命周期：
创建阶段：创建变量对象，建立作用链接，确定this指向。
代码执行阶段：完成变量赋值，函数引用。执行其他代码。


npm init
npm install webpack --save-dev
npm install webpack-dev-server --save-dev

1： npm install vue-cli -g //安装vue命令环境 vue --version 验证
2： 生成项目模板 vue init webpack name
3： 进入目录  npm install;
4 :  npm run dev




设计模式。
新建src 里面新建idex.js  外面建 webpack.dev.config.js 
npm init ;   npm install webpack webpack-cli --save-dev;
  更改适配器设置

this.$http.psot("",{}) // 发数据的时候， 不能用数组， 要用对象的形式。


 
曾年十五月圆时，清影素辉何太迟。
小院梧桐三两只，云下斑驳满地枝。
梦早事童年来，篱下新稻米花开。
应酬忽觉应执事，屋窗三尺月初来。


埋红包项目遇到的坑。
清楚流程，一步一步怎么走，什么情况做什么，
接口数据理清楚，数据结构清楚。
调后台接口没走进去，===>> 参数写错。
app接口调取失败， 方法名字： 传参结构：包环境：

webpack打包的时候不生成map文件  index.js 里面的 productionSourceMap: false,设置成false就好了。


 










